<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 傅万斌的个人网站</title>
    <link>https://fuwanbin.github.io/posts/</link>
    <description>Recent content in Posts on 傅万斌的个人网站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>&amp;copy; 2021 &lt;a href=&#34;https://fuwanbin.github.io/&#34;&gt;Wanbin Fu&lt;/a&gt;
</copyright>
    <lastBuildDate>Thu, 20 Jan 2022 22:48:36 +0800</lastBuildDate><atom:link href="https://fuwanbin.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CMake基础中文教程</title>
      <link>https://fuwanbin.github.io/posts/20220120/</link>
      <pubDate>Thu, 20 Jan 2022 22:48:36 +0800</pubDate>
      
      <guid>https://fuwanbin.github.io/posts/20220120/</guid>
      <description>Step 1: 从最基础的开始  对简单的项目来说，一个3行的CMakeLists.txt就足够了。
# CMake 最低版本号要求 cmake_minimum_required(VERSION 3.10) # 设置项目名称 project(Demo) # 指定生成目标 add_executable(Demo demo.cc)   注意，这个例子在CMakeLists.txt文件中使用了小写命令。CMake支持大小写和混合大小写命令。下面的示例demo.cc，用来计算一个数字的幂次。
#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; int poww(int a, int b) { int ans = 1, base = a; while (b != 0) { if (b &amp;amp; 1 !</description>
    </item>
    
    <item>
      <title>C&#43;&#43;进程间通信——共享内存、信号量</title>
      <link>https://fuwanbin.github.io/posts/20220116_2/</link>
      <pubDate>Sun, 16 Jan 2022 18:07:57 +0800</pubDate>
      
      <guid>https://fuwanbin.github.io/posts/20220116_2/</guid>
      <description>一、进程 概念  进程就是正在内存中运行中的程序，Linux下一个进程在内存里有三部分的数据,就是“代码段”、“堆栈段”和“数据段”。
 “代码段”存放程序代码。“堆栈段” 存放程序的返回地址、程序的参数以及程序的局部变量。而“数据段”存放程序的全局量,常数以及动态数据分配的数据空间(比如用new函数分配的空间)。
 系统如果同时运行多个相同的程序,它们的“代码段”是相同的，“堆栈段&amp;quot; 和“数据段&amp;quot;是不同的。
查看进程 ps #显示当前终端进程 ps -ef #显示系统所有进程 ps -ef|grep name #显示与name相关的进程  查看当前进程编号 pid_t getpid();  创建一个进程 // 返回值为0表示当前位于子进程，否则为主进程 pid_t fork();  二、进程通信方式  进程通信的方式大概分为六种。
 1)管道:包括无名管道( pipe )及命名管道( named pipe) , 无名管道可用于具有父进程和子进程之间的通信。命名管道克服了管道 没有名字的限制,因此,除具有管道所具有的功能外,它还允许无亲缘关系进程间的通信。</description>
    </item>
    
    <item>
      <title>Lua快速入门</title>
      <link>https://fuwanbin.github.io/posts/20220116_1/</link>
      <pubDate>Sun, 16 Jan 2022 15:36:43 +0800</pubDate>
      
      <guid>https://fuwanbin.github.io/posts/20220116_1/</guid>
      <description>Lua相关链接 Lua在线模拟器
Lua5.3参考手册
基本语法 添加注释 --这是单行注释 --[[这是多行注释 这是多行注释 --]]  声明变量 --能在多个文件中调用 a = 10 --作用域仅为当前文件 local b = 10 --声明多个变量 c, d = 10, 20  输出语句 a = 10 print(a) b, c, d = 10, 20, 30 print(b, c, d) --输出结果中每个变量中间都有一个&#39;\t&#39;  nil --Lua里的nil类似于NULL或null print(a) --输出未初始化的变量，输出结果为nil  number类型 a = 10 --10 b = 0x12 --18 c = 2e5 --200000.</description>
    </item>
    
    <item>
      <title>C&#43;&#43;11并发与多线程(七)——std::async和std::future</title>
      <link>https://fuwanbin.github.io/posts/20220112_2/</link>
      <pubDate>Wed, 12 Jan 2022 23:33:13 +0800</pubDate>
      
      <guid>https://fuwanbin.github.io/posts/20220112_2/</guid>
      <description>一、概念  std::async是一个函数模板，用来启动一个异步任务，返回一个std::future对象，std::future是个类模板。
 异步任务：创建一个线程并开始执行对应线程的入口函数，返回一个std::future对象，它含有线程入口函数返回的结果，用std::future::get()来获取结果。
 std::future，也可以说是提供了一种访问异步操作结果的机制。std::future对象里会保存一个值，在将来（异步操作执行完之后）可以拿到。
二、用法 头文件 #include &amp;lt;future&amp;gt;  初始化 int fun() { return 123; } // ... // 用一个可调用对象创建一个线程并开始执行，流程不会卡到这 // 尖括号里的类型就是函数的返回类型 std::future&amp;lt;int&amp;gt; res = std::async(fun);  get() （只能调用一次） // 如果运行到了get()而还没得到结果（fun()还没有return），就会阻塞到这一行直到拿到了结果 cout &amp;lt;&amp;lt; res.get() &amp;lt;&amp;lt; endl; // 123  wait() // 进入阻塞状态直到之前创建的线程走完 res.</description>
    </item>
    
    <item>
      <title>C&#43;&#43;11并发与多线程(六)——std::condition_variable介绍</title>
      <link>https://fuwanbin.github.io/posts/20220112_1/</link>
      <pubDate>Wed, 12 Jan 2022 21:43:00 +0800</pubDate>
      
      <guid>https://fuwanbin.github.io/posts/20220112_1/</guid>
      <description>一、引言  在之前的文章中，我们通过循环来判断消息队列是否为空，这样做其实浪费了不少系统资源。有没有一种方法可以在“插入消息”的线程往队列里添加了消息之后通知“取出消息”的线程，或者满足其他条件时通知到其他线程，并且在通知到之前，另一个线程一直保持阻塞状态达到节省系统资源的目的呢？
二、代码演示 class A { public: // 把收到的消息push进消息队列 void inQ() { for (int i = 0; i &amp;lt; 10000; i++) { std::unique_lock&amp;lt;std::mutex&amp;gt; my_guard1(my_mutex1); cout &amp;lt;&amp;lt; &amp;quot;inQ执行，插入&amp;quot; &amp;lt;&amp;lt; i &amp;lt;&amp;lt; endl; q.push_back(i); // 唤醒另一个线程的wait() // 只有另一个线程卡在wait()里时，该函数才有作用 my_cond.notify_one(); } } // 把消息从消息队列取出 void outQ() { int cmd = 0; while (1) { std::unique_lock&amp;lt;std::mutex&amp;gt; my_lock(my_mutex1); // 当其他线程用notify_one()将本线程从阻塞状态唤醒 my_cond.</description>
    </item>
    
    <item>
      <title>C&#43;&#43;11并发与多线程(五)——多线程下的单例模式</title>
      <link>https://fuwanbin.github.io/posts/20220111_3/</link>
      <pubDate>Tue, 11 Jan 2022 23:36:08 +0800</pubDate>
      
      <guid>https://fuwanbin.github.io/posts/20220111_3/</guid>
      <description>一、单线程下的单例模式实现 class A { private: A() {} //私有化构造函数 private: static A* instance; public: static A* getInstance() { if (instance == nullptr) { instance = new A(); // 由于gc是static的，所以能用于在整个程序结束时回收instance。 static GC gc; } return instance; } // 内部类，用来释放对象 class GC { public: // 整个程序退出时调用，释放内存，instance置空防止悬空指针 ~GC() { if (instance !</description>
    </item>
    
    <item>
      <title>C&#43;&#43;11并发与多线程(四)——unique_lock类模板详解</title>
      <link>https://fuwanbin.github.io/posts/20220111_2/</link>
      <pubDate>Tue, 11 Jan 2022 22:14:09 +0800</pubDate>
      
      <guid>https://fuwanbin.github.io/posts/20220111_2/</guid>
      <description>一、概念  unique_lock在一般情况（无第二参数）下，能和lock_guard互相替换，但unique_lock相比而言更加灵活，因此时空效率上会差点。
二、第二参数 std::adopt_lock  表示这个互斥量已经调用过lock()函数（所以你应该在这之前调用该互斥量的lock()函数，否则会报异常）。和lock_guard的用法、作用相同。
std::try_to_lock 概念  当多个线程都要一个互斥量的锁，其中一个线程拿到了锁，其他线程就会阻塞，白白浪费系统资源。当第二参数为std::try_to_lock，unique_lock就会去尝试拿锁，并立即得到结果owns_lock()，不会阻塞，我们可以根据结果来让线程走不同的分支。
代码演示 class A { public: // 把收到的消息push进消息队列 void inQ() { for (int i = 0; i &amp;lt; 100000; i++) { cout &amp;lt;&amp;lt; &amp;quot;inQ执行，插入&amp;quot; &amp;lt;&amp;lt; i &amp;lt;&amp;lt; endl; std::unique_lock&amp;lt;std::mutex&amp;gt; my_guard1(my_mutex1, std::try_to_lock); if (my_guard1.</description>
    </item>
    
    <item>
      <title>C&#43;&#43;11并发与多线程(三)——多个线程间的数据保护|mutex</title>
      <link>https://fuwanbin.github.io/posts/20220111_1/</link>
      <pubDate>Tue, 11 Jan 2022 00:03:09 +0800</pubDate>
      
      <guid>https://fuwanbin.github.io/posts/20220111_1/</guid>
      <description>一、没有任何保护措施的代码 class A { public: // 把收到的消息push进消息队列 void inQ() { for (int i = 0; i &amp;lt; 100000; i++) { cout &amp;lt;&amp;lt; &amp;quot;inQ执行，插入&amp;quot; &amp;lt;&amp;lt; i &amp;lt;&amp;lt; endl; q.push_back(i); // 假设i是我们收到的消息 } } // 把消息从消息队列取出 void outQ() { for (int i = 0; i &amp;lt; 100000; i++) { if (!</description>
    </item>
    
    <item>
      <title>对象创建的线程安全</title>
      <link>https://fuwanbin.github.io/posts/20220110/</link>
      <pubDate>Mon, 10 Jan 2022 23:00:30 +0800</pubDate>
      
      <guid>https://fuwanbin.github.io/posts/20220110/</guid>
      <description>参考资料 陈硕. Linux多线程服务端编程 使用muduo C++网络库[M]. 1. 电子工业出版社, 2013-1-15.</description>
    </item>
    
    <item>
      <title>C&#43;&#43;11并发与多线程(二)——子线程传参</title>
      <link>https://fuwanbin.github.io/posts/20220109_3/</link>
      <pubDate>Sun, 09 Jan 2022 21:18:54 +0800</pubDate>
      
      <guid>https://fuwanbin.github.io/posts/20220109_3/</guid>
      <description>一、在创建线程时传递参数 代码演示  在初始化子线程时，第一个参数为 可调用对象，之后依次填入函数需要的参数。
class A { public: void operator()(int x) { fun(x); } }; void fun(int x) { cout &amp;lt;&amp;lt; &amp;quot;线程开始执行\n&amp;quot;; cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; endl; cout &amp;lt;&amp;lt; &amp;quot;线程执行完毕\n&amp;quot;; } int main(void) { int x = 5; //函数 thread myt1(fun, x); myt1.</description>
    </item>
    
    <item>
      <title>C&#43;&#43;11并发与多线程(一)——创建一个子线程</title>
      <link>https://fuwanbin.github.io/posts/20220109_2/</link>
      <pubDate>Sun, 09 Jan 2022 16:40:28 +0800</pubDate>
      
      <guid>https://fuwanbin.github.io/posts/20220109_2/</guid>
      <description>看这篇文章默认你已经学会多线程，并发等相关基础概念。
一、引言  在之前，Windows和Linux下创建线程的函数是不同的，不能跨平台。从C++11新标准开始，C++语言本身增加对多线程的支持，意味着可移植性（跨平台），大大减少开发人员的工作量。
 为了引入C++11的多线程函数库，我们要包含一个头文件：thread。
二、创建一个子线程 程序演示  以下程序包含两个线程，对应两条程序执行线路。主线程执行main()函数，在main()函数中会创建一个子线程，这个子线程会执行fun()。
#include &amp;lt;iostream&amp;gt; #include &amp;lt;thread&amp;gt; using namespace std; // 创建一个函数作为线程的入口。 void fun() { cout &amp;lt;&amp;lt; &amp;quot;线程开始执行\n&amp;quot;; cout &amp;lt;&amp;lt; &amp;quot;线程执行完毕\n&amp;quot;; } int main() { // 创建一个thread实例,用我们写的函数fun初始化，创建完毕该线程会自动执行我们给定的函数。 // 可用其他的 可调用对象 初始化，下面会讲 thread myt(fun); cout &amp;lt;&amp;lt; myt.</description>
    </item>
    
    <item>
      <title>Linux信号</title>
      <link>https://fuwanbin.github.io/posts/20220109_1/</link>
      <pubDate>Sun, 09 Jan 2022 00:58:30 +0800</pubDate>
      
      <guid>https://fuwanbin.github.io/posts/20220109_1/</guid>
      <description>一、引言  我们知道，对于一个可执行文件main， 我们可以用./main运行。在程序运行时，输出的信息都可以在黑框里看到，用Ctrl + C 可以终止该文件。如果想让程序在后台运行，执行程序的时候，命令的最后面加“&amp;amp;”符号。
./main &amp;amp;   这时，main程序就会在后台运行，脱离了终端控制，Ctrl + C想要终止该程序也是不行的。我们先暂时用以下命令杀死进程。区别详见链接 
killall main #或 kill &amp;lt;进程id&amp;gt;   二、signal信号  在程序运行时，Ctrl + C、killall或kill本质就是向程序发送一个信号，程序对该信号的缺省行为是终止程序运行。这里说缺省行为，是因为在代码中我们可以自定义程序对任意信号的行为。
程序演示 #include &amp;lt;stdio.h&amp;gt; #include &amp;lt;unistd.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;signal.h&amp;gt; // 这是我们自定义的函数表示对信号的行为，自定义的行为会覆盖掉缺省行为 void fun(int sig) { printf(&amp;quot;收到了信号: %d\n&amp;quot;, sig); } int main() { // 指定信号对应的行为, 同时覆盖掉其缺省的 使程序终止 的行为 // SIGINT和SIGTERM是宏定义，表示信号值 signal(SIGINT, fun); // 键盘中断Ctrl + C signal(SIGTERM, fun); // killall或kill while(1) { } return 0; }   现在程序收到Ctrl + C的信号时已经不会终止，反而会执行我们指定的fun()函数。为了能跳出程序，方便之后的程序演示，我们按Ctrl + Z暂时挂起程序,挂起的程序还会留在进程中，并暂停运行。   如我们之前所说，killall和kill也不能终止程序了。那这时候我们要怎么终止程序呢？从之前给的链接我们学到，可以添加参数 -9 来强制杀死进程。</description>
    </item>
    
    <item>
      <title>Codeforces#658</title>
      <link>https://fuwanbin.github.io/posts/20200722/</link>
      <pubDate>Wed, 22 Jul 2020 12:13:57 +0800</pubDate>
      
      <guid>https://fuwanbin.github.io/posts/20200722/</guid>
      <description>传送门
A.Common Subsequence 题意：找出两个数组中一个相同的元素。 标记一下出现的数字即可。
int num[1005];void solve(int T){int a, b;memset(num, 0, sizeof(num));cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;for (int i = 1; i &amp;lt;= n; i++){cin &amp;gt;&amp;gt; a;num[a] = 1;}for (int i = 1; i &amp;lt;= m; i++){cin &amp;gt;&amp;gt; b;if (num[b] == 1)num[b] = 2;}for (int i = 1; i &amp;lt;= 1000; i++)if (num[i] == 2){cout &amp;lt;&amp;lt; &amp;quot;YES\n1 &amp;quot;;cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; endl;return;}cout &amp;lt;&amp;lt; &amp;quot;NO\n&amp;quot;;} B.</description>
    </item>
    
    <item>
      <title>Codeforces-Global#9</title>
      <link>https://fuwanbin.github.io/posts/20200705/</link>
      <pubDate>Sun, 05 Jul 2020 13:22:04 +0800</pubDate>
      
      <guid>https://fuwanbin.github.io/posts/20200705/</guid>
      <description>传送门
A.Sign Flipping  题意：给一个包含$n$个整数的数组，可以随意改变他们的正负号使得至少有$\frac{n-1}{2}$个相邻数字的差$\ge0$，且至少有$\frac{n-1}{2}$个相邻数字的差$\leq0$。 对于任意的三个数字$a$,$-b$,$c$，其中$a$,$b$,$c$ &amp;gt; $0$，一定符合以上我们所说的要求。我们再延申至任意长度的数组。
int n, k;int a[105];void solve(){cin &amp;gt;&amp;gt; n;bool f = 1;for (int i = 1; i &amp;lt;= n; i++){cin &amp;gt;&amp;gt; a[i];a[i] = abs(a[i]);}for (int i = 1; i &amp;lt;= n; i++){if (f)cout &amp;lt;&amp;lt; a[i] &amp;lt;&amp;lt; &amp;quot; &amp;quot;;else cout &amp;lt;&amp;lt; -a[i] &amp;lt;&amp;lt; &amp;quot; &amp;quot;;f ^= 1;}cout &amp;lt;&amp;lt; endl;} B.</description>
    </item>
    
    <item>
      <title>Codeforces#650</title>
      <link>https://fuwanbin.github.io/posts/20200617/</link>
      <pubDate>Wed, 17 Jun 2020 01:19:52 +0800</pubDate>
      
      <guid>https://fuwanbin.github.io/posts/20200617/</guid>
      <description>传送门
A.Short Substrings 题意：有一个字符串，从左至右列出所有长度为2的子串，然后连起来，这就是题目给的串。要我们输出原来的串。输出开头，中间隔位输出，再输出结尾。
void solve(){string s;cin &amp;gt;&amp;gt; s;cout &amp;lt;&amp;lt; s[0];for (int i = 1; i &amp;lt; s.size() - 1; i += 2)cout &amp;lt;&amp;lt; s[i];cout &amp;lt;&amp;lt; s[s.size() - 1] &amp;lt;&amp;lt; endl;} B.Even Array 给你n个数，下标从0开始，可以通过交换某两个数使得每位数字和他的下标奇偶性相同，求最小交换次数，不可能的情况输出-1。我们只让不符合要求的奇数数字和偶数数字交换，所以记录这两种数字的数量，只有奇数数字个数==偶数数字个数，才能交换完，因为奇数数字和奇数数字交换是没有意义的。最后的交换次数就是奇数或者偶数的数量。</description>
    </item>
    
    <item>
      <title>Codeforces#648</title>
      <link>https://fuwanbin.github.io/posts/20200608/</link>
      <pubDate>Mon, 08 Jun 2020 14:55:33 +0800</pubDate>
      
      <guid>https://fuwanbin.github.io/posts/20200608/</guid>
      <description>传送门
A.Matrix Game  给你一个$n×m$的01矩阵，两个玩家一先一后把为0的$a$$ij$变为1，条件为第$i$行和第$j$列没有1，当一名玩家无点可改，lose。我们每改一个点，就会有1行和1列失效。显而易见，在这个$n×m$的01矩阵中，最多可以变$min(n, m)$个点。 因为在最初给的01矩阵中，也可能有1，我们要先算出还有几个点可改，再判奇偶性即可
#define clr(a, b) memset((a), (b), sizeof(a))int n, m, a;int l[55], r[55];void solve(){clr(l, 0);//有t个case，记得初始化clr(r, 0);cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;int L = n, R = m;//记录还有几行几列是没有1的for (int i = 1; i &amp;lt;= n; i++)for (int j = 1; j &amp;lt;= m; j++){cin &amp;gt;&amp;gt; a;if (a == 1){if (l[i] == 0)L--;if (r[j] == 0)R--;l[i] = r[j] = 1;}}if (min(L, R) % 2 == 1)cout &amp;lt;&amp;lt; &amp;quot;Ashish\n&amp;quot;;else cout &amp;lt;&amp;lt; &amp;quot;Vivek\n&amp;quot;;} B.</description>
    </item>
    
    <item>
      <title>Codeforces#646</title>
      <link>https://fuwanbin.github.io/posts/20200601/</link>
      <pubDate>Mon, 01 Jun 2020 12:05:37 +0800</pubDate>
      
      <guid>https://fuwanbin.github.io/posts/20200601/</guid>
      <description>传送门
A.Odd Selection 给你$n$个数，问能不能在其中选$x$个数使得$sum$为奇数。 我们知道，只有选 奇数个数的 奇数，$sum$才会是奇数。 数据范围不大，我们直接枚举每一种取 奇数个数的 奇数 的情况，然后再看看偶数够不够取，即可
int n, m, k, x;void solve(){cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; x;int odd = 0, ev = 0;for (int i = 1; i &amp;lt;= n; i++){cin &amp;gt;&amp;gt; k;if (k % 2 == 1)odd++;else ev++;}bool f = 0;for (int i = 0; i &amp;lt;= odd; i++)if (i % 2 == 1 &amp;amp;&amp;amp; i &amp;lt;= x &amp;amp;&amp;amp; x - i &amp;lt;= ev)f = 1;if (f)cout &amp;lt;&amp;lt; &amp;quot;YES\n&amp;quot;;else cout &amp;lt;&amp;lt; &amp;quot;NO\n&amp;quot;;} B.</description>
    </item>
    
    <item>
      <title>Codeforces-Edu#88</title>
      <link>https://fuwanbin.github.io/posts/20200529/</link>
      <pubDate>Fri, 29 May 2020 12:54:28 +0800</pubDate>
      
      <guid>https://fuwanbin.github.io/posts/20200529/</guid>
      <description>传送门
A.Berland Poker 给你n张牌，其中m张joker，平均分给k个人，保证n%k==0
问分数的最大值。这里分数指拿到joker最多的人的牌的数量-拿到joker最少的人的牌的数量。那么我们可以知道，让其中一个人尽可能全部拿joker，剩下的尽可能平分即可。
int n, m, k;void solve(){cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m &amp;gt;&amp;gt; k;int maxn = n / k;if (maxn &amp;lt;= m)cout &amp;lt;&amp;lt; maxn - (int)ceil((1.0 * m - maxn) / (1.0 * k - 1)) &amp;lt;&amp;lt; endl;elsecout &amp;lt;&amp;lt; m &amp;lt;&amp;lt; endl;} B.</description>
    </item>
    
    <item>
      <title>Codeforces#645</title>
      <link>https://fuwanbin.github.io/posts/20200527/</link>
      <pubDate>Wed, 27 May 2020 14:51:04 +0800</pubDate>
      
      <guid>https://fuwanbin.github.io/posts/20200527/</guid>
      <description>传送门
A.Park Lighting 给n×m个格子，格子之间那条线是路；你可以在路的中间放一个路灯，来照亮相邻两个格子，求照亮所有格子的最少路灯数。
int n, m;void solve(){cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;if (n % 2 == 0 || m % 2 == 0)cout &amp;lt;&amp;lt; m * n / 2 &amp;lt;&amp;lt; endl;elsecout &amp;lt;&amp;lt; m * (n - 1) / 2 + (m + 1) / 2 &amp;lt;&amp;lt; endl;} B.</description>
    </item>
    
  </channel>
</rss>
